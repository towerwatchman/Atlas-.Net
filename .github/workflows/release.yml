# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Altas Main

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name:
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
              
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release
      
    - name: Bump build version
      id: package_version
      uses: vers-one/dotnet-project-version-updater@v1.6
      with:
        file: "Atlas/Atlas.csproj"
        version: "*.*.^"
    
    - run: |
        git config user.name "towerwatchman"
        git config user.email "towerwatchman@users.noreply.github.com"
        git add .
        git commit -m "Bump project version to ${{ steps.package_version.outputs.newVersion }}"
        git push
        
    - name: Zip the Build
      run: Compress-Archive -Path ./Atlas/bin/Release/net8.0-windows -DestinationPath ${{github.workspace}}/Atlas_${{steps.package_version.outputs.newVersion}}.${{ github.run_number }}_windows.zip
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
      with:
        tag_name: ${{ github.run_number }}
        release_name: v${{ steps.package_version.outputs.newVersion }}.${{ github.run_number }}
        body: Release build of v${{ steps.package_version.outputs.newVersion }}.${{ github.run_number }}
        draft: false
        prerelease: true
        fail_on_unmatched_files: true
        generate_release_notes: true
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{github.workspace}}/Atlas_${{steps.package_version.outputs.newVersion}}.${{ github.run_number }}_windows.zip
        asset_name: Atlas_${{steps.package_version.outputs.newVersion}}.${{ github.run_number }}_windows.zip
        asset_content_type: application/zip
